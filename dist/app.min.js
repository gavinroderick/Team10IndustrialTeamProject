google.charts.load('current', {packages: ['corechart', 'line']});
google.charts.setOnLoadCallback(drawBasic);


    // var groundFloor;
    // var groundFloorReqURL = 'api/groundFloorStores.json';
    // var groundFloorReq = new XMLHttpRequest();
    // groundFloorReq.open('GET', groundFloorReqURL);
    // groundFloorReq.send();
    // groundFloorReq.onload = () => {
    //     var groundFloorStores = groundFloorReq.response;
    //     var obj = JSON.parse(groundFloorStores);
    //     groundFloor = obj;
    // }

    // var firstFloor;
    // var firstFloorReqURL = 'api/firstFloorStores.json';
    // var firstFloorReq = new XMLHttpRequest();
    // firstFloorReq.open('GET', firstFloorReqURL);
    // firstFloorReq.send();
    // firstFloorReq.onload = () => {
    //     var firstFloorStores = firstFloorReq.response;
    //     var obj = JSON.parse(firstFloorStores);
    //     firstFloor = obj;
    // }

    // var storeData;
    // var storeReqURL = 'api/data.json';
    // var storeReq = new XMLHttpRequest();
    // storeReq.open('GET', storeReqURL);
    // storeReq.send();
    // storeReq.onload = () => {
    //     var storeDatas = storeReq.response;
    //     var obj = JSON.parse(storeDatas);
    //     storeData = obj;
    // }

function drawBasic(id) {

    var store;

    for( var i = 0; i < groundFloor.stores.length; i++)
    {
        if (storeData[i]['id'] == id)
        {
            store = i;
            break;
        }
    }
    for( var i = 0; i < firstFloor.stores.length; i++)
    {
        if (storeData[i]['id'] == id)
        {
            store = i;
            break;
        }
    }

    var data = new google.visualization.DataTable();

    data.addColumn('string', 'Time');
    data.addColumn('number', 'Occupancy');
    data.addColumn('number', 'Noise');
    data.addColumn('number', 'Humidity');


    for( var i = 1; i < 41; i++)
    {

      var timeslot = storeData[store]['history'][0]['times'][i-1]['timeslot'].toString();
      var timeslotArray = timeslot.split('');
      
      var hour = timeslotArray[11].concat(timeslotArray[12]);
      var min = timeslotArray[14].concat(timeslotArray[15]);
      var time = hour.concat(min);




      data.addRows([
          [
              
              time, 
              storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
              storeData[store]['history'][0]['times'][i-1]['noise']*100,
              storeData[store]['history'][0]['times'][i-1]['humidity']*100
          ]
      ]
      );

    }


      var options = {
        hAxis: { 
          showTextEvery : '4',
          gridlines :{count: '10'}
        },
        vAxis: {
          baseline: 0
        },
        curveType: 'function',
        width: '700',
        legend: { position: 'bottom' }
      };

    var chart_div = document.getElementById('chart_div');
    var chart = new google.visualization.LineChart(chart_div);

    // Wait for the chart to finish drawing before calling the getImageURI() method.
    google.visualization.events.addListener(chart, 'ready', function () { });

    chart.draw(data, options);
    return('<img src="' + chart.getImageURI() + '">');
}

    var groundFloor;
    var groundFloorReqURL = 'api/groundFloorStores.json';
    var groundFloorReq = new XMLHttpRequest();
    groundFloorReq.open('GET', groundFloorReqURL);
    groundFloorReq.send();
    groundFloorReq.onload = () => {
        var groundFloorStores = groundFloorReq.response;
        var obj = JSON.parse(groundFloorStores);
        groundFloor = obj;
    }

    var firstFloor;
    var firstFloorReqURL = 'api/firstFloorStores.json';
    var firstFloorReq = new XMLHttpRequest();
    firstFloorReq.open('GET', firstFloorReqURL);
    firstFloorReq.send();
    firstFloorReq.onload = () => {
        var firstFloorStores = firstFloorReq.response;
        var obj = JSON.parse(firstFloorStores);
        firstFloor = obj;
    }

    var storeData;
    var storeReqURL = 'api/data.json';
    var storeReq = new XMLHttpRequest();
    storeReq.open('GET', storeReqURL);
    storeReq.send();
    storeReq.onload = () => {
        var storeDatas = storeReq.response;
        var obj = JSON.parse(storeDatas);
        storeData = obj;
    }

function setEntityHighlights() {
    for(var i = 0; i < groundFloor.stores.length; i++){
        map.indoors.setEntityHighlights(groundFloor.stores[i].id.toString(), randomColor());
    }
    for(var i = 0; i < firstFloor.stores.length; i++){
        map.indoors.setEntityHighlights(firstFloor.stores[i].id.toString(), randomColor());
    }

}
function setStoreHighlights(store, colour){
    store = store.toString();
    map.indoors.setEntityHighlights(store, colour);
}

function randomColor(){
    var red = Math.floor(Math.random() * 256);
    var green = 255 - red;
    return [red, green, 0, 200];
}

function clearEntityHighlights(){
    map.indoors.clearEntityHighlights();
}
var map = L.Wrld.map("map", "9d876646f7d83cc709edbe204c81d546", {
    center: [56.4598, -2.9728],
    zoom: 17,
    indoorsEnabled: true
});
  var indoorControl = new WrldIndoorControl("widget-container", map);
  var currentIndoorMapId;
  var currentFloor;
  var entityIdsToPosition = {};
  
  var lastMouseDown;
  function onMouseDown(event) {
    lastMouseDown = event.latlng;
  }
  
  function onIndoorEntityClicked(event) {
    event.ids.forEach(identifyEntity);
  }

  function exportIdMap() {
    console.log(JSON.stringify(entityIdsToPosition));
  }
  
  function onIndoorMapEntered(event) {
    currentIndoorMapId = event.indoorMap.getIndoorMapId();
    currentFloor = map.indoors.getFloor().getFloorIndex();
  }
  
  function onIndoorMapFloorChanged() {
    currentFloor = map.indoors.getFloor().getFloorIndex();
  }
  
  function identifyEntity(id) {
    var latLng = lastMouseDown;

    var graph = drawBasic(id);
    
    var popupOptions = { 
      indoorMapId: currentIndoorMapId, 
      indoorMapFloorIndex: currentFloor, 
      autoClose: false, 
      closeOnClick: false,
      minWidth: "5"          
    };
    var popup = L.popup(popupOptions)
      .setLatLng(latLng)
      .addTo(map)
      .setContent(graph);
    entityIdsToPosition[id] = { "latLng": latLng, "indoorId": currentIndoorMapId, "floorIndex": currentFloor } ;
  }

  map.indoors.on("indoormapenter", onIndoorMapEntered);
  map.indoors.on("indoormapfloorchange", onIndoorMapFloorChanged)
  map.indoors.on("indoorentityclick", onIndoorEntityClicked);
  map.on("mousedown", onMouseDown);
// var d = new Date();
// document.getElementById("date").innerHTML = d;
//Onload function to setup sliders
window.onload = function (){
    var sliders = document.getElementsByClassName("rangePicker");
    // var textBoxes = document.getElementsByClassName("textBox");
    [].forEach.call(sliders, function (slider) {    
        slider.min = 10;
        slider.max = 50;
        slider.step = 10;
        slider.value = 30;
    });

    document.getElementById("SAD").addEventListener("click", presetsUpdate(0));
    document.getElementById("GOOD").addEventListener("click", presetsUpdate(2));
    document.getElementById("NORMAL").addEventListener("click", presetsUpdate(1));
}

function presetsUpdate(level){
    var occupancy = [10,30,50];
    var noise = [10,30,50];
    var humidity = [10,30,50];

    for(var i=0; i < 3; i++){
        document.getElementById("occupancy-slider").value = occupancy[level];
        document.getElementById("noise-slider").value = noise[level];
        document.getElementById("humidity-slider").value = humidity[level];
    }
}
// Called when a slider is updated. 
function updateMapFromSliders(){ 

    var stores = storeData;
    var current = getCurrentSliderLevel();
    var level = Math.round(getAverageSliderLevel(current));
    var max = getMaxToleranceLevel(level);
    var min = getMinToleranceLevel(level);

    for(var i = 0; i < stores.length; i++){
        var storeID = stores[i].id;
        //var currentData = getCurrentData(storeID, Math.round(level));
        var dataArray = getCurrentTimeslot(storeID);
        console.log(dataArray, i);
        var colour = calculateColour(dataArray, max, min); 

        setStoreHighlights(storeID, colour);
    }

}

// Gets current levels sliders are at, parses them into numbers.
// Returns as an array.
function getCurrentSliderLevel(){
    var sliderArray =[];
    var sliders = document.getElementsByClassName("rangePicker");
    [].forEach.call(sliders, function (slider) {
        sliderArray.push(parseInt(slider.value, 10));
    });
    console.log("Slider Values: " + sliderArray);
    return sliderArray;
}


// Takes an array of numbers (int)
// Returns the average of the array.
// Code for avaraging arrays found via Google at https://gist.github.com/bmorelli25/4564b8ff35b47d8a9db6b0dda1143465
function getAverageSliderLevel(sliderArray){
    const arrAvg = arr => arr.reduce((a,b) => a + b, 0) / arr.length;
    return arrAvg(sliderArray);
};

function getMaxToleranceLevel(sliderAvg){
    var maxTolerable;
    switch(sliderAvg){
        case 1:
        case 2:
            return maxTolerable = 0.4;
            break;
        case 3:
            return maxTolerable = 0.6;
            break;
        case 4:
        case 5:
            return maxTolerable = 0.9;
            break;
    }
}
function getMinToleranceLevel(sliderAvg){
    var minTolerable;

    switch(sliderAvg){
        case 1:
        case 2:
            return minTolerable = 0.1;
            break;
        case 3:
            return minTolerable = 0.3;
            break;
        case 4:
        case 5:
            return minTolerable = 0.6;
            break;
    }
}
// parseDataObj(obj);
//     obj
//     currentDataArray = [];
//     currentArray.push(currentTimeslot['occupancy']);
//     currentArray.push(currentTimeslot['noise']);
//     currentArray.push(currentTimeslot['humidity']);

//     return calculateColour(currentArray, maxTolerable, minTolerable);
// }

function getCurrentTimeslot(id){
    var store;
    for( var i = 0; i < groundFloor.stores.length; i++) {
        if (storeData[i]['id'] == id) {
            store = i;
            break;
        }
    }
    return storeData[store]['history'][0]['times'][0];
}

function checkValue(value, max, min){
    var colourLevel = 0;
    if(parseFloat(value) > max){ colourLevel = 5; };
    if(parseFloat(value) < min){ colourLevel = 1; };
    if(parseFloat(value) < max && parseFloat(value > min)){ colourLevel = 3; };
    console.log("Value Being Checked: " + parseFloat(value) + " Colour Level" + colourLevel);
    return parseInt(colourLevel);
}

function calculateColour(currentDataObj, max, min){
    var colourLevel = 0;
    var colour;
    var occupancy = currentDataObj.occupancy;
    var noise = currentDataObj.noise;
    var humidity = currentDataObj.humidity;
    console.log("Occupany~Noise~Humidity: " + occupancy + " " + noise + " " + humidity)
    colourLevel += checkValue(occupancy,max,min);
    colourLevel += checkValue(noise, max, min);
    colourLevel += checkValue(humidity, max, min);
    
    var avgColourLevel = Math.round(colourLevel / 3);
    console.log(avgColourLevel);
    switch(avgColourLevel){
        case 1:
        case 2:
            colour = [255,0,0,200];
            break;
        case 3:
            colour = [255,140,0,200];
            break;
        case 4:
        case 5:
            colour = [0,255,0,200];
            break;
        default: 
            colour= [255,255,200, 200];
    }
    return colour;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
