google.charts.load('current', {packages: ['corechart', 'line']});
google.charts.setOnLoadCallback(drawBasic);


    // var groundFloor;
    // var groundFloorReqURL = 'api/groundFloorStores.json';
    // var groundFloorReq = new XMLHttpRequest();
    // groundFloorReq.open('GET', groundFloorReqURL);
    // groundFloorReq.send();
    // groundFloorReq.onload = () => {
    //     var groundFloorStores = groundFloorReq.response;
    //     var obj = JSON.parse(groundFloorStores);
    //     groundFloor = obj;
    // }

    // var firstFloor;
    // var firstFloorReqURL = 'api/firstFloorStores.json';
    // var firstFloorReq = new XMLHttpRequest();
    // firstFloorReq.open('GET', firstFloorReqURL);
    // firstFloorReq.send();
    // firstFloorReq.onload = () => {
    //     var firstFloorStores = firstFloorReq.response;
    //     var obj = JSON.parse(firstFloorStores);
    //     firstFloor = obj;
    // }

    // var storeData;
    // var storeReqURL = 'api/data.json';
    // var storeReq = new XMLHttpRequest();
    // storeReq.open('GET', storeReqURL);
    // storeReq.send();
    // storeReq.onload = () => {
    //     var storeDatas = storeReq.response;
    //     var obj = JSON.parse(storeDatas);
    //     storeData = obj;
    // }

function drawBasic(id) {

    var store;

    var currentTime = new Date();
    var currentTimeArray = currentTime.toLocaleTimeString('it-IT').split(':');


    for( var i = 0; i < groundFloor.stores.length; i++)
    {
        if (storeData[i]['id'] == id)
        {
            store = i;
            break;
        }
    }
    for( var i = 0; i < firstFloor.stores.length; i++)
    {
        if (storeData[i]['id'] == id)
        {
            store = i;
            break;
        }
    }

    var data = new google.visualization.DataTable();

    data.addColumn('string', 'Time');
    data.addColumn('number', 'Occupancy');
    data.addColumn('number', 'Noise');
    data.addColumn('number', 'Humidity');
    data.addColumn('number', 'Occupancy Prediction');
    data.addColumn('number', 'Noise Prediction');
    data.addColumn('number', 'Humidity Prediction');


    for( var i = 1; i < 41; i++)
    {

      var timeslot = storeData[store]['history'][0]['times'][i-1]['timeslot'].toString();
      var timeslotArray = timeslot.split('');
      
      var hour = timeslotArray[11].concat(timeslotArray[12]);
      var min = timeslotArray[14].concat(timeslotArray[15]);
      var time = hour.concat(":");
      time = time.concat(min);

      if(hour < currentTimeArray[0])
      {
        data.addRows([
              [
                  
                  time, 
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100,
                  null,
                  null,
                  null
              ]
          ]
          );
      } else if (hour == currentTimeArray[0]){
        if(min <= currentTimeArray[1])
        {
          data.addRows([
              [
                  
                  time, 
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100,
                  null,
                  null,
                  null
              ]
          ]
          );
        } else {
          data.addRows([
              [
                  
                  time, 
                  null, 
                  null,
                  null,
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100
              ]
          ]
          );
        }
      }else {
        data.addRows([
              [
                  
                  time, 
                  null, 
                  null,
                  null,
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100
              ]
          ]
          );
      }
    }


      var options = {
        hAxis: { 
          showTextEvery : '4',
          gridlines :{count: '10'}
        },
        vAxis: {
          baseline: 0
        },
        curveType: 'function',
        width: '700',
        legend: { position: 'bottom' }
      };

    var chart_div = document.getElementById('chart_div');
    var chart = new google.visualization.LineChart(chart_div);

    // Wait for the chart to finish drawing before calling the getImageURI() method.
    google.visualization.events.addListener(chart, 'ready', function () { });

    chart.draw(data, options);
    return('<img src="' + chart.getImageURI() + '">');
}
    var groundFloor;
    var groundFloorReqURL = 'api/groundFloorStores.json';
    var groundFloorReq = new XMLHttpRequest();
    groundFloorReq.open('GET', groundFloorReqURL);
    groundFloorReq.send();
    groundFloorReq.onload = () => {
        var groundFloorStores = groundFloorReq.response;
        var obj = JSON.parse(groundFloorStores);
        groundFloor = obj;
    }

    var firstFloor;
    var firstFloorReqURL = 'api/firstFloorStores.json';
    var firstFloorReq = new XMLHttpRequest();
    firstFloorReq.open('GET', firstFloorReqURL);
    firstFloorReq.send();
    firstFloorReq.onload = () => {
        var firstFloorStores = firstFloorReq.response;
        var obj = JSON.parse(firstFloorStores);
        firstFloor = obj;
    }

    var storeData;
    var storeReqURL = 'api/data.json';
    var storeReq = new XMLHttpRequest();
    storeReq.open('GET', storeReqURL);
    storeReq.send();
    storeReq.onload = () => {
        var storeDatas = storeReq.response;
        var obj = JSON.parse(storeDatas);
        storeData = obj;
    }

var groundFloor;
var groundFloorReqURL = 'api/groundFloorStores.json';
var groundFloorReq = new XMLHttpRequest();
groundFloorReq.open('GET', groundFloorReqURL);
groundFloorReq.send();
groundFloorReq.onload = () => {
    var groundFloorStores = groundFloorReq.response;
    var obj = JSON.parse(groundFloorStores);
    groundFloor = obj;
}

var firstFloor;
var firstFloorReqURL = 'api/firstFloorStores.json';
var firstFloorReq = new XMLHttpRequest();
firstFloorReq.open('GET', firstFloorReqURL);
firstFloorReq.send();
firstFloorReq.onload = () => {
    var firstFloorStores = firstFloorReq.response;
    var obj = JSON.parse(firstFloorStores);
    firstFloor = obj;
}

var storeData;
var storeReqURL = 'api/data.json';
var storeReq = new XMLHttpRequest();
storeReq.open('GET', storeReqURL);
storeReq.send();
storeReq.onload = () => {
    var storeDatas = storeReq.response;
    var obj = JSON.parse(storeDatas);
    storeData = obj;
}


function setEntityHighlights() {
    for(var i = 0; i < groundFloor.stores.length; i++){
        map.indoors.setEntityHighlights(groundFloor.stores[i].id.toString(), randomColor());
    }
    for(var i = 0; i < firstFloor.stores.length; i++){
        map.indoors.setEntityHighlights(firstFloor.stores[i].id.toString(), randomColor());
    }
}

function randomColor(){
    var red = Math.floor(Math.random() * 256);
    var green = 255 - red;
    return [red, green, 0, 200]
}

function clearEntityHighlights() {
    map.indoors.clearEntityHighlights();
}

var d = new Date();

var map = L.Wrld.map("map", "9d876646f7d83cc709edbe204c81d546", {
    center: [56.4598, -2.9728],
    zoom: 17,
    indoorsEnabled: true
  });
  var indoorControl = new WrldIndoorControl("widget-container", map);
  var currentIndoorMapId;
  var currentFloor;
  var entityIdsToPosition = {};
  var d;
  var popup;
  
  
  var lastMouseDown;
  function onMouseDown(event) {
    lastMouseDown = event.latlng;
  }
  
  function onIndoorEntityClicked(event) {
    event.ids.forEach(identifyEntity);
  }

  function exportIdMap() {
    console.log(JSON.stringify(entityIdsToPosition));
  }
  
  function onIndoorMapEntered(event) {
    map.indoors.setFloor(0);
    map.setView([56.4598, -2.9728], 17);
    currentIndoorMapId = event.indoorMap.getIndoorMapId();
    currentFloor = map.indoors.getFloor().getFloorIndex();
  }
  
  function onIndoorMapFloorChanged() {
    currentFloor = map.indoors.getFloor().getFloorIndex();
  }

  function getStoreName(id){
    if(currentFloor == 0)
    {
      for(var i = 0; i < groundFloor.stores.length; i++)
      {
        if(groundFloor.stores[i].id == id)
        {
          //console.log(groundFloor.stores[i].store);
          return groundFloor.stores[i].store;
        }
      }
    }
  }

  function validId(id) {

    for( var i = 0; i < groundFloor.stores.length; i++)
    {
          if (storeData[i]['id'] == id)
          {
              return i;
          }
    }
    for( var i = 0; i < firstFloor.stores.length; i++)
    {
          if (storeData[i]['id'] == id)
          {
              return i;
          }
    }
    return null;
}

  
  function identifyEntity(id) {
    var latLng = lastMouseDown;
    d = new Date();

    var valid = validId(id);

    if(valid != null)
    {
      map.setView(latLng, 17);

      d = new Date();
      
      var popupOptions = { 
        indoorMapId: currentIndoorMapId, 
        indoorMapFloorIndex: currentFloor, 
        autoClose: true, 
        closeOnClick: true,
        minWidth: "700"          
      };
      popup = L.popup(popupOptions)
        .setLatLng(latLng)
        .addTo(map)
        .setContent(createMockHTMLElement(id, d, drawBasic(id)));
      entityIdsToPosition[id] = { "latLng": latLng, "indoorId": currentIndoorMapId, "floorIndex": currentFloor } ;

    // setTimeout(updatePopup(id, d), 5000);
  }

  function updatePopup(id, d)
  {
    d = new Date();
    console.log(d.toLocaleTimeString('it-IT'));
    popup.setContent(createMockHTMLElement(id, d, drawBasic(id)));
  }

  map.indoors.on("indoormapenter", onIndoorMapEntered);
  map.indoors.on("indoormapfloorchange", onIndoorMapFloorChanged)
  map.indoors.on("indoorentityclick", onIndoorEntityClicked);
  map.on("mousedown", onMouseDown);

  function createMockHTMLElement(id, date, graphText){
    var graphHTML = '<div class="content">' +
                    '<h2>'+ getStoreName(id) + ' for the ' + d.getDate() + ' of Spetember 2018</h2>' +
                    graphText +
                    '</div>';
    return graphHTML;
// var d = new Date();
// document.getElementById("date").innerHTML = d;
//Onload function to setup sliders
window.onload = function (){
    var sliders = document.getElementsByClassName("rangePicker");
    // var textBoxes = document.getElementsByClassName("textBox");
    [].forEach.call(sliders, function (slider) {    
        slider.min = 10;
        slider.max = 50;
        slider.step = 10;
        slider.value = 30;
    });

    document.getElementById("SAD").addEventListener("click", presetsUpdate(0));
    document.getElementById("GOOD").addEventListener("click", presetsUpdate(2));
    document.getElementById("NORMAL").addEventListener("click", presetsUpdate(1));
}

function presetsUpdate(level){
    var occupancy = [10,30,50];
    var noise = [10,30,50];
    var humidity = [10,30,50];

    for(var i=0; i < 3; i++){
        document.getElementById("occupancy-slider").value = occupancy[level];
        document.getElementById("noise-slider").value = noise[level];
        document.getElementById("humidity-slider").value = humidity[level];
    }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
