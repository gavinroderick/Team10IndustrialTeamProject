google.charts.load('current', {packages: ['corechart', 'line']});
google.charts.setOnLoadCallback(drawBasic);


    // var groundFloor;
    // var groundFloorReqURL = 'api/groundFloorStores.json';
    // var groundFloorReq = new XMLHttpRequest();
    // groundFloorReq.open('GET', groundFloorReqURL);
    // groundFloorReq.send();
    // groundFloorReq.onload = () => {
    //     var groundFloorStores = groundFloorReq.response;
    //     var obj = JSON.parse(groundFloorStores);
    //     groundFloor = obj;
    // }

    // var firstFloor;
    // var firstFloorReqURL = 'api/firstFloorStores.json';
    // var firstFloorReq = new XMLHttpRequest();
    // firstFloorReq.open('GET', firstFloorReqURL);
    // firstFloorReq.send();
    // firstFloorReq.onload = () => {
    //     var firstFloorStores = firstFloorReq.response;
    //     var obj = JSON.parse(firstFloorStores);
    //     firstFloor = obj;
    // }

    // var storeData;
    // var storeReqURL = 'api/data.json';
    // var storeReq = new XMLHttpRequest();
    // storeReq.open('GET', storeReqURL);
    // storeReq.send();
    // storeReq.onload = () => {
    //     var storeDatas = storeReq.response;
    //     var obj = JSON.parse(storeDatas);
    //     storeData = obj;
    // }

function drawBasic(id) {

    var store;

    var currentTime = new Date();
    var currentTimeArray = currentTime.toLocaleTimeString('it-IT').split(':');


    for( var i = 0; i < groundFloor.stores.length; i++)
    {
        if (storeData[i]['id'] == id)
        {
            store = i;
            break;
        }
    }
    for( var i = 0; i < firstFloor.stores.length; i++)
    {
        if (storeData[i]['id'] == id)
        {
            store = i;
            break;
        }
    }

    var data = new google.visualization.DataTable();

    data.addColumn('string', 'Time');
    data.addColumn('number', 'Occupancy');
    data.addColumn('number', 'Noise');
    data.addColumn('number', 'Humidity');
    data.addColumn('number', 'Occupancy Prediction');
    data.addColumn('number', 'Noise Prediction');
    data.addColumn('number', 'Humidity Prediction');


    for( var i = 1; i < 41; i++)
    {

      var timeslot = storeData[store]['history'][0]['times'][i-1]['timeslot'].toString();
      var timeslotArray = timeslot.split('');
      
      var hour = timeslotArray[11].concat(timeslotArray[12]);
      var min = timeslotArray[14].concat(timeslotArray[15]);
      var time = hour.concat(":");
      time = time.concat(min);

      if(hour < currentTimeArray[0])
      {
        data.addRows([
              [
                  
                  time, 
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100,
                  null,
                  null,
                  null
              ]
          ]
          );
      } else if (hour == currentTimeArray[0]){
        if(min <= currentTimeArray[1])
        {
          data.addRows([
              [
                  
                  time, 
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100,
                  null,
                  null,
                  null
              ]
          ]
          );
        } else {
          data.addRows([
              [
                  
                  time, 
                  null, 
                  null,
                  null,
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100
              ]
          ]
          );
        }
      }else {
        data.addRows([
              [
                  
                  time, 
                  null, 
                  null,
                  null,
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100
              ]
          ]
          );
      }
    }


      var options = {
        hAxis: { 
          showTextEvery : '4',
          gridlines :{count: '10'}
        },
        vAxis: {
          baseline: 0
        },
        curveType: 'function',
        width: '700',
        legend: { position: 'bottom' }
      };

    var chart_div = document.getElementById('chart_div');
    var chart = new google.visualization.LineChart(chart_div);

    // Wait for the chart to finish drawing before calling the getImageURI() method.
    google.visualization.events.addListener(chart, 'ready', function () { });

    chart.draw(data, options);
    return('<img src="' + chart.getImageURI() + '">');
}


function fakeDrawBasic(id) {

    var store;
    
    for( var i = 0; i < groundFloor.stores.length; i++)
    {
        if (storeData[i]['id'] == id)
        {
            store = i;
            break;
        }
    }
    for( var i = 0; i < firstFloor.stores.length; i++)
    {
        if (storeData[i]['id'] == id)
        {
            store = i;
            break;
        }
    }

    var data = new google.visualization.DataTable();

    data.addColumn('string', 'Time');
    data.addColumn('number', 'Occupancy');
    data.addColumn('number', 'Noise');
    data.addColumn('number', 'Humidity');
    data.addColumn('number', 'Occupancy Prediction');
    data.addColumn('number', 'Noise Prediction');
    data.addColumn('number', 'Humidity Prediction');


    for( var i = 1; i < 41; i++)
    {

      var timeslot = storeData[store]['history'][0]['times'][i-1]['timeslot'].toString();
      var timeslotArray = timeslot.split('');
      
      var hour = timeslotArray[11].concat(timeslotArray[12]);
      var min = timeslotArray[14].concat(timeslotArray[15]);
      var time = hour.concat(":");
      time = time.concat(min);

      if(hour < currentHour)
      {
        data.addRows([
              [
                  
                  time, 
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100,
                  null,
                  null,
                  null
              ]
          ]
          );
      } else if (hour == currentHour){
        if(min <= currentMin)
        {
          data.addRows([
              [
                  
                  time, 
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100,
                  null,
                  null,
                  null
              ]
          ]
          );
        } else {
          data.addRows([
              [
                  
                  time, 
                  null, 
                  null,
                  null,
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100
              ]
          ]
          );
        }
      }else {
        data.addRows([
              [
                  
                  time, 
                  null, 
                  null,
                  null,
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100
              ]
          ]
          );
      }
    }


      var options = {
        hAxis: { 
          showTextEvery : '4',
          gridlines :{count: '10'}
        },
        vAxis: {
          baseline: 0
        },
        curveType: 'function',
        width: '700',
        legend: { position: 'bottom' }
      };

    var chart_div = document.getElementById('chart_div');
    var chart = new google.visualization.LineChart(chart_div);

    // Wait for the chart to finish drawing before calling the getImageURI() method.
    google.visualization.events.addListener(chart, 'ready', function () { });

    chart.draw(data, options);
    return('<img src="' + chart.getImageURI() + '">');
}

    var groundFloor;
    var groundFloorReqURL = 'api/groundFloorStores.json';
    var groundFloorReq = new XMLHttpRequest();
    groundFloorReq.open('GET', groundFloorReqURL);
    groundFloorReq.send();
    groundFloorReq.onload = () => {
        var groundFloorStores = groundFloorReq.response;
        var obj = JSON.parse(groundFloorStores);
        groundFloor = obj;
    }

    var firstFloor;
    var firstFloorReqURL = 'api/firstFloorStores.json';
    var firstFloorReq = new XMLHttpRequest();
    firstFloorReq.open('GET', firstFloorReqURL);
    firstFloorReq.send();
    firstFloorReq.onload = () => {
        var firstFloorStores = firstFloorReq.response;
        var obj = JSON.parse(firstFloorStores);
        firstFloor = obj;
    }

    var storeData;
    var storeReqURL = 'api/data.json';
    var storeReq = new XMLHttpRequest();
    storeReq.open('GET', storeReqURL);
    storeReq.send();
    storeReq.onload = () => {
        var storeDatas = storeReq.response;
        var obj = JSON.parse(storeDatas);
        storeData = obj;
    }

var groundFloor;
var groundFloorReqURL = 'api/groundFloorStores.json';
var groundFloorReq = new XMLHttpRequest();
groundFloorReq.open('GET', groundFloorReqURL);
groundFloorReq.send();
groundFloorReq.onload = () => {
    var groundFloorStores = groundFloorReq.response;
    var obj = JSON.parse(groundFloorStores);
    groundFloor = obj;
}

var firstFloor;
var firstFloorReqURL = 'api/firstFloorStores.json';
var firstFloorReq = new XMLHttpRequest();
firstFloorReq.open('GET', firstFloorReqURL);
firstFloorReq.send();
firstFloorReq.onload = () => {
    var firstFloorStores = firstFloorReq.response;
    var obj = JSON.parse(firstFloorStores);
    firstFloor = obj;
}

var storeData;
var storeReqURL = 'api/data.json';
var storeReq = new XMLHttpRequest();
storeReq.open('GET', storeReqURL);
storeReq.send();
storeReq.onload = () => {
    var storeDatas = storeReq.response;
    var obj = JSON.parse(storeDatas);
    storeData = obj;
}


function setEntityHighlights() {
    for(var i = 0; i < groundFloor.stores.length; i++){
        map.indoors.setEntityHighlights(groundFloor.stores[i].id.toString(), randomColor());
    }
    for(var i = 0; i < firstFloor.stores.length; i++){
        map.indoors.setEntityHighlights(firstFloor.stores[i].id.toString(), randomColor());
    }
}

function randomColor(){
    var red = Math.floor(Math.random() * 256);
    var green = 255 - red;
    return [red, green, 0, 200]
}

function clearEntityHighlights() {
    map.indoors.clearEntityHighlights();
}

var d = new Date();

var map = L.Wrld.map("map", "9d876646f7d83cc709edbe204c81d546", {
    center: [56.4598, -2.9728],
    zoom: 17,
    indoorsEnabled: true
  });
  var indoorControl = new WrldIndoorControl("widget-container", map);
  var currentIndoorMapId;
  var currentFloor;
  var entityIdsToPosition = {};
  var d;
  var popup;
  
  
  var lastMouseDown;
  function onMouseDown(event) {
    lastMouseDown = event.latlng;
  }
  
  function onIndoorEntityClicked(event) {
    event.ids.forEach(identifyEntity);
  }

  function exportIdMap() {
    console.log(JSON.stringify(entityIdsToPosition));
  }
  
  function onIndoorMapEntered(event) {
    map.indoors.setFloor(0);
    map.setView([56.4598, -2.9728], 17);
    currentIndoorMapId = event.indoorMap.getIndoorMapId();
    currentFloor = map.indoors.getFloor().getFloorIndex();
  }
  
  function onIndoorMapFloorChanged() {
    currentFloor = map.indoors.getFloor().getFloorIndex();
  }

  function getStoreName(id){
    if(currentFloor == 0)
    {
      for(var i = 0; i < groundFloor.stores.length; i++)
      {
        if(groundFloor.stores[i].id == id)
        {
          //console.log(groundFloor.stores[i].store);
          return groundFloor.stores[i].store;
        }
      }
    }
  }

  function validId(id) {

    for( var i = 0; i < groundFloor.stores.length; i++)
    {
          if (storeData[i]['id'] == id)
          {
              return i;
          }
    }
    for( var i = 0; i < firstFloor.stores.length; i++)
    {
          if (storeData[i]['id'] == id)
          {
              return i;
          }
    }
    return null;
}


//For Demo
var counter = 1;
var currentHour = 9;
var currentMin = 0;
  
  function identifyEntity(id) {
    var latLng = lastMouseDown;
    d = new Date();

    var valid = validId(id);

    if(valid != null)
    {
      //map.setView(latLng, 17);

      d = displayTime();
      
      var popupOptions = { 
        indoorMapId: currentIndoorMapId, 
        indoorMapFloorIndex: currentFloor, 
        autoClose: true, 
        closeOnClick: true,
        minWidth: "700"          
      };
      popup = L.popup(popupOptions)
        .setLatLng(latLng)
        .addTo(map)
        .setContent(createMockHTMLElement(id, d, fakeDrawBasic(id)));
      entityIdsToPosition[id] = { "latLng": latLng, "indoorId": currentIndoorMapId, "floorIndex": currentFloor } ;

      //For demo
      if (counter == 0)
      {
        currentHour = currentHour + 1;
        currentMin = 0;
        console.log(currentHour);
        console.log(currentMin);
      } else {
        currentMin = currentMin + 15;
        console.log(currentHour);
        console.log(currentMin);
      }
      if(counter == 3)
      {
        counter = 0;
      }else{
        counter++;
      }
    }

    // setTimeout(updatePopup(id, d), 5000);
  }

  function updatePopup(id, d)
  {
    d = new Date();
    console.log(d.toLocaleTimeString('it-IT'));
    popup.setContent(createMockHTMLElement(id, d, drawBasic(id)));
  }

  map.indoors.on("indoormapenter", onIndoorMapEntered);
  map.indoors.on("indoormapfloorchange", onIndoorMapFloorChanged)
  map.indoors.on("indoorentityclick", onIndoorEntityClicked);
  map.on("mousedown", onMouseDown);

  function createMockHTMLElement(id, date, graphText){
    var graphHTML = '<div class="content">' +
                    '<h2>'+ getStoreName(id) +  ' ' + date + '</h2>' +
                    graphText +
                    '</div>';
    return graphHTML;
}

  function displayTime(){
    var toReturn = "0";
    var tempv= "";
    if (currentHour < 10 && currentMin == 0)
    {
        toReturn = toReturn.concat(currentHour).concat(":").concat("0").concat(currentMin);
    } else if (currentHour < 10 && currentMin != 0)
    {
        toReturn = toReturn.concat(currentHour).concat(":").concat(currentMin);
    } else if ( currentHour >= 10 && currentMin == 0)
    {
      toReturn = temp.concat(currentHour).concat(":").concat("0").concat(currentMin);
    } else 
    {
      toReturn = temp.concat(currentHour).concat(":").concat(currentMin);
    }
    return toReturn;
  }





/*                  '<div class="content">' +
                    '<h2>'+ getStoreName(id) + ' for the ' + d.getDate() + ' of Spetember 2018</h2>' +
                    graphText +
                    '</div>';
*/




// var d = new Date();
// document.getElementById("date").innerHTML = d;
//Onload function to setup sliders
window.onload = function (){
    var sliders = document.getElementsByClassName("rangePicker");
    // var textBoxes = document.getElementsByClassName("textBox");
    [].forEach.call(sliders, function (slider) {    
        slider.min = 10;
        slider.max = 50;
        slider.step = 10;
        slider.value = 30;
    });

    document.getElementById("SAD").addEventListener("click", presetsUpdate(0));
    document.getElementById("GOOD").addEventListener("click", presetsUpdate(2));
    document.getElementById("NORMAL").addEventListener("click", presetsUpdate(1));
}

function presetsUpdate(level){
    var occupancy = [10,30,50];
    var noise = [10,30,50];
    var humidity = [10,30,50];

    for(var i=0; i < 3; i++){
        document.getElementById("occupancy-slider").value = occupancy[level];
        document.getElementById("noise-slider").value = noise[level];
        document.getElementById("humidity-slider").value = humidity[level];
    }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyYXBoLmpzIiwibG9hZERhdGEuanMiLCJtYXBIaWdobGlnaHRpbmcuanMiLCJwb3B1cHMuanMiLCJyZWFsVGltZUdyYXBoLmpzIiwic2V0dGluZ3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzdTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy9LQTtBQUNBO0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJnb29nbGUuY2hhcnRzLmxvYWQoJ2N1cnJlbnQnLCB7cGFja2FnZXM6IFsnY29yZWNoYXJ0JywgJ2xpbmUnXX0pO1xuZ29vZ2xlLmNoYXJ0cy5zZXRPbkxvYWRDYWxsYmFjayhkcmF3QmFzaWMpO1xuXG5cbiAgICAvLyB2YXIgZ3JvdW5kRmxvb3I7XG4gICAgLy8gdmFyIGdyb3VuZEZsb29yUmVxVVJMID0gJ2FwaS9ncm91bmRGbG9vclN0b3Jlcy5qc29uJztcbiAgICAvLyB2YXIgZ3JvdW5kRmxvb3JSZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAvLyBncm91bmRGbG9vclJlcS5vcGVuKCdHRVQnLCBncm91bmRGbG9vclJlcVVSTCk7XG4gICAgLy8gZ3JvdW5kRmxvb3JSZXEuc2VuZCgpO1xuICAgIC8vIGdyb3VuZEZsb29yUmVxLm9ubG9hZCA9ICgpID0+IHtcbiAgICAvLyAgICAgdmFyIGdyb3VuZEZsb29yU3RvcmVzID0gZ3JvdW5kRmxvb3JSZXEucmVzcG9uc2U7XG4gICAgLy8gICAgIHZhciBvYmogPSBKU09OLnBhcnNlKGdyb3VuZEZsb29yU3RvcmVzKTtcbiAgICAvLyAgICAgZ3JvdW5kRmxvb3IgPSBvYmo7XG4gICAgLy8gfVxuXG4gICAgLy8gdmFyIGZpcnN0Rmxvb3I7XG4gICAgLy8gdmFyIGZpcnN0Rmxvb3JSZXFVUkwgPSAnYXBpL2ZpcnN0Rmxvb3JTdG9yZXMuanNvbic7XG4gICAgLy8gdmFyIGZpcnN0Rmxvb3JSZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAvLyBmaXJzdEZsb29yUmVxLm9wZW4oJ0dFVCcsIGZpcnN0Rmxvb3JSZXFVUkwpO1xuICAgIC8vIGZpcnN0Rmxvb3JSZXEuc2VuZCgpO1xuICAgIC8vIGZpcnN0Rmxvb3JSZXEub25sb2FkID0gKCkgPT4ge1xuICAgIC8vICAgICB2YXIgZmlyc3RGbG9vclN0b3JlcyA9IGZpcnN0Rmxvb3JSZXEucmVzcG9uc2U7XG4gICAgLy8gICAgIHZhciBvYmogPSBKU09OLnBhcnNlKGZpcnN0Rmxvb3JTdG9yZXMpO1xuICAgIC8vICAgICBmaXJzdEZsb29yID0gb2JqO1xuICAgIC8vIH1cblxuICAgIC8vIHZhciBzdG9yZURhdGE7XG4gICAgLy8gdmFyIHN0b3JlUmVxVVJMID0gJ2FwaS9kYXRhLmpzb24nO1xuICAgIC8vIHZhciBzdG9yZVJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIC8vIHN0b3JlUmVxLm9wZW4oJ0dFVCcsIHN0b3JlUmVxVVJMKTtcbiAgICAvLyBzdG9yZVJlcS5zZW5kKCk7XG4gICAgLy8gc3RvcmVSZXEub25sb2FkID0gKCkgPT4ge1xuICAgIC8vICAgICB2YXIgc3RvcmVEYXRhcyA9IHN0b3JlUmVxLnJlc3BvbnNlO1xuICAgIC8vICAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShzdG9yZURhdGFzKTtcbiAgICAvLyAgICAgc3RvcmVEYXRhID0gb2JqO1xuICAgIC8vIH1cblxuZnVuY3Rpb24gZHJhd0Jhc2ljKGlkKSB7XG5cbiAgICB2YXIgc3RvcmU7XG5cbiAgICB2YXIgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIHZhciBjdXJyZW50VGltZUFycmF5ID0gY3VycmVudFRpbWUudG9Mb2NhbGVUaW1lU3RyaW5nKCdpdC1JVCcpLnNwbGl0KCc6Jyk7XG5cblxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZ3JvdW5kRmxvb3Iuc3RvcmVzLmxlbmd0aDsgaSsrKVxuICAgIHtcbiAgICAgICAgaWYgKHN0b3JlRGF0YVtpXVsnaWQnXSA9PSBpZClcbiAgICAgICAge1xuICAgICAgICAgICAgc3RvcmUgPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBmaXJzdEZsb29yLnN0b3Jlcy5sZW5ndGg7IGkrKylcbiAgICB7XG4gICAgICAgIGlmIChzdG9yZURhdGFbaV1bJ2lkJ10gPT0gaWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHN0b3JlID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVRhYmxlKCk7XG5cbiAgICBkYXRhLmFkZENvbHVtbignc3RyaW5nJywgJ1RpbWUnKTtcbiAgICBkYXRhLmFkZENvbHVtbignbnVtYmVyJywgJ09jY3VwYW5jeScpO1xuICAgIGRhdGEuYWRkQ29sdW1uKCdudW1iZXInLCAnTm9pc2UnKTtcbiAgICBkYXRhLmFkZENvbHVtbignbnVtYmVyJywgJ0h1bWlkaXR5Jyk7XG4gICAgZGF0YS5hZGRDb2x1bW4oJ251bWJlcicsICdPY2N1cGFuY3kgUHJlZGljdGlvbicpO1xuICAgIGRhdGEuYWRkQ29sdW1uKCdudW1iZXInLCAnTm9pc2UgUHJlZGljdGlvbicpO1xuICAgIGRhdGEuYWRkQ29sdW1uKCdudW1iZXInLCAnSHVtaWRpdHkgUHJlZGljdGlvbicpO1xuXG5cbiAgICBmb3IoIHZhciBpID0gMTsgaSA8IDQxOyBpKyspXG4gICAge1xuXG4gICAgICB2YXIgdGltZXNsb3QgPSBzdG9yZURhdGFbc3RvcmVdWydoaXN0b3J5J11bMF1bJ3RpbWVzJ11baS0xXVsndGltZXNsb3QnXS50b1N0cmluZygpO1xuICAgICAgdmFyIHRpbWVzbG90QXJyYXkgPSB0aW1lc2xvdC5zcGxpdCgnJyk7XG4gICAgICBcbiAgICAgIHZhciBob3VyID0gdGltZXNsb3RBcnJheVsxMV0uY29uY2F0KHRpbWVzbG90QXJyYXlbMTJdKTtcbiAgICAgIHZhciBtaW4gPSB0aW1lc2xvdEFycmF5WzE0XS5jb25jYXQodGltZXNsb3RBcnJheVsxNV0pO1xuICAgICAgdmFyIHRpbWUgPSBob3VyLmNvbmNhdChcIjpcIik7XG4gICAgICB0aW1lID0gdGltZS5jb25jYXQobWluKTtcblxuICAgICAgaWYoaG91ciA8IGN1cnJlbnRUaW1lQXJyYXlbMF0pXG4gICAgICB7XG4gICAgICAgIGRhdGEuYWRkUm93cyhbXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgdGltZSwgXG4gICAgICAgICAgICAgICAgICBzdG9yZURhdGFbc3RvcmVdWydoaXN0b3J5J11bMF1bJ3RpbWVzJ11baS0xXVsnb2NjdXBhbmN5J10qMTAwLCBcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydub2lzZSddKjEwMCxcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydodW1pZGl0eSddKjEwMCxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGhvdXIgPT0gY3VycmVudFRpbWVBcnJheVswXSl7XG4gICAgICAgIGlmKG1pbiA8PSBjdXJyZW50VGltZUFycmF5WzFdKVxuICAgICAgICB7XG4gICAgICAgICAgZGF0YS5hZGRSb3dzKFtcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICB0aW1lLCBcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydvY2N1cGFuY3knXSoxMDAsIFxuICAgICAgICAgICAgICAgICAgc3RvcmVEYXRhW3N0b3JlXVsnaGlzdG9yeSddWzBdWyd0aW1lcyddW2ktMV1bJ25vaXNlJ10qMTAwLFxuICAgICAgICAgICAgICAgICAgc3RvcmVEYXRhW3N0b3JlXVsnaGlzdG9yeSddWzBdWyd0aW1lcyddW2ktMV1bJ2h1bWlkaXR5J10qMTAwLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICBdXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhLmFkZFJvd3MoW1xuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIHRpbWUsIFxuICAgICAgICAgICAgICAgICAgbnVsbCwgXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydvY2N1cGFuY3knXSoxMDAsIFxuICAgICAgICAgICAgICAgICAgc3RvcmVEYXRhW3N0b3JlXVsnaGlzdG9yeSddWzBdWyd0aW1lcyddW2ktMV1bJ25vaXNlJ10qMTAwLFxuICAgICAgICAgICAgICAgICAgc3RvcmVEYXRhW3N0b3JlXVsnaGlzdG9yeSddWzBdWyd0aW1lcyddW2ktMV1bJ2h1bWlkaXR5J10qMTAwXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICBdXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfWVsc2Uge1xuICAgICAgICBkYXRhLmFkZFJvd3MoW1xuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIHRpbWUsIFxuICAgICAgICAgICAgICAgICAgbnVsbCwgXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydvY2N1cGFuY3knXSoxMDAsIFxuICAgICAgICAgICAgICAgICAgc3RvcmVEYXRhW3N0b3JlXVsnaGlzdG9yeSddWzBdWyd0aW1lcyddW2ktMV1bJ25vaXNlJ10qMTAwLFxuICAgICAgICAgICAgICAgICAgc3RvcmVEYXRhW3N0b3JlXVsnaGlzdG9yeSddWzBdWyd0aW1lcyddW2ktMV1bJ2h1bWlkaXR5J10qMTAwXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICBdXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGhBeGlzOiB7IFxuICAgICAgICAgIHNob3dUZXh0RXZlcnkgOiAnNCcsXG4gICAgICAgICAgZ3JpZGxpbmVzIDp7Y291bnQ6ICcxMCd9XG4gICAgICAgIH0sXG4gICAgICAgIHZBeGlzOiB7XG4gICAgICAgICAgYmFzZWxpbmU6IDBcbiAgICAgICAgfSxcbiAgICAgICAgY3VydmVUeXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICB3aWR0aDogJzcwMCcsXG4gICAgICAgIGxlZ2VuZDogeyBwb3NpdGlvbjogJ2JvdHRvbScgfVxuICAgICAgfTtcblxuICAgIHZhciBjaGFydF9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnRfZGl2Jyk7XG4gICAgdmFyIGNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkxpbmVDaGFydChjaGFydF9kaXYpO1xuXG4gICAgLy8gV2FpdCBmb3IgdGhlIGNoYXJ0IHRvIGZpbmlzaCBkcmF3aW5nIGJlZm9yZSBjYWxsaW5nIHRoZSBnZXRJbWFnZVVSSSgpIG1ldGhvZC5cbiAgICBnb29nbGUudmlzdWFsaXphdGlvbi5ldmVudHMuYWRkTGlzdGVuZXIoY2hhcnQsICdyZWFkeScsIGZ1bmN0aW9uICgpIHsgfSk7XG5cbiAgICBjaGFydC5kcmF3KGRhdGEsIG9wdGlvbnMpO1xuICAgIHJldHVybignPGltZyBzcmM9XCInICsgY2hhcnQuZ2V0SW1hZ2VVUkkoKSArICdcIj4nKTtcbn1cblxuXG5mdW5jdGlvbiBmYWtlRHJhd0Jhc2ljKGlkKSB7XG5cbiAgICB2YXIgc3RvcmU7XG4gICAgXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBncm91bmRGbG9vci5zdG9yZXMubGVuZ3RoOyBpKyspXG4gICAge1xuICAgICAgICBpZiAoc3RvcmVEYXRhW2ldWydpZCddID09IGlkKVxuICAgICAgICB7XG4gICAgICAgICAgICBzdG9yZSA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IoIHZhciBpID0gMDsgaSA8IGZpcnN0Rmxvb3Iuc3RvcmVzLmxlbmd0aDsgaSsrKVxuICAgIHtcbiAgICAgICAgaWYgKHN0b3JlRGF0YVtpXVsnaWQnXSA9PSBpZClcbiAgICAgICAge1xuICAgICAgICAgICAgc3RvcmUgPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5EYXRhVGFibGUoKTtcblxuICAgIGRhdGEuYWRkQ29sdW1uKCdzdHJpbmcnLCAnVGltZScpO1xuICAgIGRhdGEuYWRkQ29sdW1uKCdudW1iZXInLCAnT2NjdXBhbmN5Jyk7XG4gICAgZGF0YS5hZGRDb2x1bW4oJ251bWJlcicsICdOb2lzZScpO1xuICAgIGRhdGEuYWRkQ29sdW1uKCdudW1iZXInLCAnSHVtaWRpdHknKTtcbiAgICBkYXRhLmFkZENvbHVtbignbnVtYmVyJywgJ09jY3VwYW5jeSBQcmVkaWN0aW9uJyk7XG4gICAgZGF0YS5hZGRDb2x1bW4oJ251bWJlcicsICdOb2lzZSBQcmVkaWN0aW9uJyk7XG4gICAgZGF0YS5hZGRDb2x1bW4oJ251bWJlcicsICdIdW1pZGl0eSBQcmVkaWN0aW9uJyk7XG5cblxuICAgIGZvciggdmFyIGkgPSAxOyBpIDwgNDE7IGkrKylcbiAgICB7XG5cbiAgICAgIHZhciB0aW1lc2xvdCA9IHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWyd0aW1lc2xvdCddLnRvU3RyaW5nKCk7XG4gICAgICB2YXIgdGltZXNsb3RBcnJheSA9IHRpbWVzbG90LnNwbGl0KCcnKTtcbiAgICAgIFxuICAgICAgdmFyIGhvdXIgPSB0aW1lc2xvdEFycmF5WzExXS5jb25jYXQodGltZXNsb3RBcnJheVsxMl0pO1xuICAgICAgdmFyIG1pbiA9IHRpbWVzbG90QXJyYXlbMTRdLmNvbmNhdCh0aW1lc2xvdEFycmF5WzE1XSk7XG4gICAgICB2YXIgdGltZSA9IGhvdXIuY29uY2F0KFwiOlwiKTtcbiAgICAgIHRpbWUgPSB0aW1lLmNvbmNhdChtaW4pO1xuXG4gICAgICBpZihob3VyIDwgY3VycmVudEhvdXIpXG4gICAgICB7XG4gICAgICAgIGRhdGEuYWRkUm93cyhbXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgdGltZSwgXG4gICAgICAgICAgICAgICAgICBzdG9yZURhdGFbc3RvcmVdWydoaXN0b3J5J11bMF1bJ3RpbWVzJ11baS0xXVsnb2NjdXBhbmN5J10qMTAwLCBcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydub2lzZSddKjEwMCxcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydodW1pZGl0eSddKjEwMCxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGhvdXIgPT0gY3VycmVudEhvdXIpe1xuICAgICAgICBpZihtaW4gPD0gY3VycmVudE1pbilcbiAgICAgICAge1xuICAgICAgICAgIGRhdGEuYWRkUm93cyhbXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgdGltZSwgXG4gICAgICAgICAgICAgICAgICBzdG9yZURhdGFbc3RvcmVdWydoaXN0b3J5J11bMF1bJ3RpbWVzJ11baS0xXVsnb2NjdXBhbmN5J10qMTAwLCBcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydub2lzZSddKjEwMCxcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydodW1pZGl0eSddKjEwMCxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YS5hZGRSb3dzKFtcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICB0aW1lLCBcbiAgICAgICAgICAgICAgICAgIG51bGwsIFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBzdG9yZURhdGFbc3RvcmVdWydoaXN0b3J5J11bMF1bJ3RpbWVzJ11baS0xXVsnb2NjdXBhbmN5J10qMTAwLCBcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydub2lzZSddKjEwMCxcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydodW1pZGl0eSddKjEwMFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1lbHNlIHtcbiAgICAgICAgZGF0YS5hZGRSb3dzKFtcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICB0aW1lLCBcbiAgICAgICAgICAgICAgICAgIG51bGwsIFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBzdG9yZURhdGFbc3RvcmVdWydoaXN0b3J5J11bMF1bJ3RpbWVzJ11baS0xXVsnb2NjdXBhbmN5J10qMTAwLCBcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydub2lzZSddKjEwMCxcbiAgICAgICAgICAgICAgICAgIHN0b3JlRGF0YVtzdG9yZV1bJ2hpc3RvcnknXVswXVsndGltZXMnXVtpLTFdWydodW1pZGl0eSddKjEwMFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBoQXhpczogeyBcbiAgICAgICAgICBzaG93VGV4dEV2ZXJ5IDogJzQnLFxuICAgICAgICAgIGdyaWRsaW5lcyA6e2NvdW50OiAnMTAnfVxuICAgICAgICB9LFxuICAgICAgICB2QXhpczoge1xuICAgICAgICAgIGJhc2VsaW5lOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGN1cnZlVHlwZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgd2lkdGg6ICc3MDAnLFxuICAgICAgICBsZWdlbmQ6IHsgcG9zaXRpb246ICdib3R0b20nIH1cbiAgICAgIH07XG5cbiAgICB2YXIgY2hhcnRfZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0X2RpdicpO1xuICAgIHZhciBjaGFydCA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5MaW5lQ2hhcnQoY2hhcnRfZGl2KTtcblxuICAgIC8vIFdhaXQgZm9yIHRoZSBjaGFydCB0byBmaW5pc2ggZHJhd2luZyBiZWZvcmUgY2FsbGluZyB0aGUgZ2V0SW1hZ2VVUkkoKSBtZXRob2QuXG4gICAgZ29vZ2xlLnZpc3VhbGl6YXRpb24uZXZlbnRzLmFkZExpc3RlbmVyKGNoYXJ0LCAncmVhZHknLCBmdW5jdGlvbiAoKSB7IH0pO1xuXG4gICAgY2hhcnQuZHJhdyhkYXRhLCBvcHRpb25zKTtcbiAgICByZXR1cm4oJzxpbWcgc3JjPVwiJyArIGNoYXJ0LmdldEltYWdlVVJJKCkgKyAnXCI+Jyk7XG59XG4iLCIgICAgdmFyIGdyb3VuZEZsb29yO1xuICAgIHZhciBncm91bmRGbG9vclJlcVVSTCA9ICdhcGkvZ3JvdW5kRmxvb3JTdG9yZXMuanNvbic7XG4gICAgdmFyIGdyb3VuZEZsb29yUmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgZ3JvdW5kRmxvb3JSZXEub3BlbignR0VUJywgZ3JvdW5kRmxvb3JSZXFVUkwpO1xuICAgIGdyb3VuZEZsb29yUmVxLnNlbmQoKTtcbiAgICBncm91bmRGbG9vclJlcS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHZhciBncm91bmRGbG9vclN0b3JlcyA9IGdyb3VuZEZsb29yUmVxLnJlc3BvbnNlO1xuICAgICAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShncm91bmRGbG9vclN0b3Jlcyk7XG4gICAgICAgIGdyb3VuZEZsb29yID0gb2JqO1xuICAgIH1cblxuICAgIHZhciBmaXJzdEZsb29yO1xuICAgIHZhciBmaXJzdEZsb29yUmVxVVJMID0gJ2FwaS9maXJzdEZsb29yU3RvcmVzLmpzb24nO1xuICAgIHZhciBmaXJzdEZsb29yUmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgZmlyc3RGbG9vclJlcS5vcGVuKCdHRVQnLCBmaXJzdEZsb29yUmVxVVJMKTtcbiAgICBmaXJzdEZsb29yUmVxLnNlbmQoKTtcbiAgICBmaXJzdEZsb29yUmVxLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgdmFyIGZpcnN0Rmxvb3JTdG9yZXMgPSBmaXJzdEZsb29yUmVxLnJlc3BvbnNlO1xuICAgICAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShmaXJzdEZsb29yU3RvcmVzKTtcbiAgICAgICAgZmlyc3RGbG9vciA9IG9iajtcbiAgICB9XG5cbiAgICB2YXIgc3RvcmVEYXRhO1xuICAgIHZhciBzdG9yZVJlcVVSTCA9ICdhcGkvZGF0YS5qc29uJztcbiAgICB2YXIgc3RvcmVSZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICBzdG9yZVJlcS5vcGVuKCdHRVQnLCBzdG9yZVJlcVVSTCk7XG4gICAgc3RvcmVSZXEuc2VuZCgpO1xuICAgIHN0b3JlUmVxLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgdmFyIHN0b3JlRGF0YXMgPSBzdG9yZVJlcS5yZXNwb25zZTtcbiAgICAgICAgdmFyIG9iaiA9IEpTT04ucGFyc2Uoc3RvcmVEYXRhcyk7XG4gICAgICAgIHN0b3JlRGF0YSA9IG9iajtcbiAgICB9XG4iLCJ2YXIgZ3JvdW5kRmxvb3I7XG52YXIgZ3JvdW5kRmxvb3JSZXFVUkwgPSAnYXBpL2dyb3VuZEZsb29yU3RvcmVzLmpzb24nO1xudmFyIGdyb3VuZEZsb29yUmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5ncm91bmRGbG9vclJlcS5vcGVuKCdHRVQnLCBncm91bmRGbG9vclJlcVVSTCk7XG5ncm91bmRGbG9vclJlcS5zZW5kKCk7XG5ncm91bmRGbG9vclJlcS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgdmFyIGdyb3VuZEZsb29yU3RvcmVzID0gZ3JvdW5kRmxvb3JSZXEucmVzcG9uc2U7XG4gICAgdmFyIG9iaiA9IEpTT04ucGFyc2UoZ3JvdW5kRmxvb3JTdG9yZXMpO1xuICAgIGdyb3VuZEZsb29yID0gb2JqO1xufVxuXG52YXIgZmlyc3RGbG9vcjtcbnZhciBmaXJzdEZsb29yUmVxVVJMID0gJ2FwaS9maXJzdEZsb29yU3RvcmVzLmpzb24nO1xudmFyIGZpcnN0Rmxvb3JSZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbmZpcnN0Rmxvb3JSZXEub3BlbignR0VUJywgZmlyc3RGbG9vclJlcVVSTCk7XG5maXJzdEZsb29yUmVxLnNlbmQoKTtcbmZpcnN0Rmxvb3JSZXEub25sb2FkID0gKCkgPT4ge1xuICAgIHZhciBmaXJzdEZsb29yU3RvcmVzID0gZmlyc3RGbG9vclJlcS5yZXNwb25zZTtcbiAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShmaXJzdEZsb29yU3RvcmVzKTtcbiAgICBmaXJzdEZsb29yID0gb2JqO1xufVxuXG52YXIgc3RvcmVEYXRhO1xudmFyIHN0b3JlUmVxVVJMID0gJ2FwaS9kYXRhLmpzb24nO1xudmFyIHN0b3JlUmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5zdG9yZVJlcS5vcGVuKCdHRVQnLCBzdG9yZVJlcVVSTCk7XG5zdG9yZVJlcS5zZW5kKCk7XG5zdG9yZVJlcS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgdmFyIHN0b3JlRGF0YXMgPSBzdG9yZVJlcS5yZXNwb25zZTtcbiAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShzdG9yZURhdGFzKTtcbiAgICBzdG9yZURhdGEgPSBvYmo7XG59XG5cblxuZnVuY3Rpb24gc2V0RW50aXR5SGlnaGxpZ2h0cygpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgZ3JvdW5kRmxvb3Iuc3RvcmVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgbWFwLmluZG9vcnMuc2V0RW50aXR5SGlnaGxpZ2h0cyhncm91bmRGbG9vci5zdG9yZXNbaV0uaWQudG9TdHJpbmcoKSwgcmFuZG9tQ29sb3IoKSk7XG4gICAgfVxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmaXJzdEZsb29yLnN0b3Jlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIG1hcC5pbmRvb3JzLnNldEVudGl0eUhpZ2hsaWdodHMoZmlyc3RGbG9vci5zdG9yZXNbaV0uaWQudG9TdHJpbmcoKSwgcmFuZG9tQ29sb3IoKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByYW5kb21Db2xvcigpe1xuICAgIHZhciByZWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpO1xuICAgIHZhciBncmVlbiA9IDI1NSAtIHJlZDtcbiAgICByZXR1cm4gW3JlZCwgZ3JlZW4sIDAsIDIwMF1cbn1cblxuZnVuY3Rpb24gY2xlYXJFbnRpdHlIaWdobGlnaHRzKCkge1xuICAgIG1hcC5pbmRvb3JzLmNsZWFyRW50aXR5SGlnaGxpZ2h0cygpO1xufVxuXG52YXIgZCA9IG5ldyBEYXRlKCk7XG4iLCJ2YXIgbWFwID0gTC5XcmxkLm1hcChcIm1hcFwiLCBcIjlkODc2NjQ2ZjdkODNjYzcwOWVkYmUyMDRjODFkNTQ2XCIsIHtcbiAgICBjZW50ZXI6IFs1Ni40NTk4LCAtMi45NzI4XSxcbiAgICB6b29tOiAxNyxcbiAgICBpbmRvb3JzRW5hYmxlZDogdHJ1ZVxuICB9KTtcbiAgdmFyIGluZG9vckNvbnRyb2wgPSBuZXcgV3JsZEluZG9vckNvbnRyb2woXCJ3aWRnZXQtY29udGFpbmVyXCIsIG1hcCk7XG4gIHZhciBjdXJyZW50SW5kb29yTWFwSWQ7XG4gIHZhciBjdXJyZW50Rmxvb3I7XG4gIHZhciBlbnRpdHlJZHNUb1Bvc2l0aW9uID0ge307XG4gIHZhciBkO1xuICB2YXIgcG9wdXA7XG4gIFxuICBcbiAgdmFyIGxhc3RNb3VzZURvd247XG4gIGZ1bmN0aW9uIG9uTW91c2VEb3duKGV2ZW50KSB7XG4gICAgbGFzdE1vdXNlRG93biA9IGV2ZW50LmxhdGxuZztcbiAgfVxuICBcbiAgZnVuY3Rpb24gb25JbmRvb3JFbnRpdHlDbGlja2VkKGV2ZW50KSB7XG4gICAgZXZlbnQuaWRzLmZvckVhY2goaWRlbnRpZnlFbnRpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwb3J0SWRNYXAoKSB7XG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZW50aXR5SWRzVG9Qb3NpdGlvbikpO1xuICB9XG4gIFxuICBmdW5jdGlvbiBvbkluZG9vck1hcEVudGVyZWQoZXZlbnQpIHtcbiAgICBtYXAuaW5kb29ycy5zZXRGbG9vcigwKTtcbiAgICBtYXAuc2V0VmlldyhbNTYuNDU5OCwgLTIuOTcyOF0sIDE3KTtcbiAgICBjdXJyZW50SW5kb29yTWFwSWQgPSBldmVudC5pbmRvb3JNYXAuZ2V0SW5kb29yTWFwSWQoKTtcbiAgICBjdXJyZW50Rmxvb3IgPSBtYXAuaW5kb29ycy5nZXRGbG9vcigpLmdldEZsb29ySW5kZXgoKTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gb25JbmRvb3JNYXBGbG9vckNoYW5nZWQoKSB7XG4gICAgY3VycmVudEZsb29yID0gbWFwLmluZG9vcnMuZ2V0Rmxvb3IoKS5nZXRGbG9vckluZGV4KCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTdG9yZU5hbWUoaWQpe1xuICAgIGlmKGN1cnJlbnRGbG9vciA9PSAwKVxuICAgIHtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBncm91bmRGbG9vci5zdG9yZXMubGVuZ3RoOyBpKyspXG4gICAgICB7XG4gICAgICAgIGlmKGdyb3VuZEZsb29yLnN0b3Jlc1tpXS5pZCA9PSBpZClcbiAgICAgICAge1xuICAgICAgICAgIC8vY29uc29sZS5sb2coZ3JvdW5kRmxvb3Iuc3RvcmVzW2ldLnN0b3JlKTtcbiAgICAgICAgICByZXR1cm4gZ3JvdW5kRmxvb3Iuc3RvcmVzW2ldLnN0b3JlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRJZChpZCkge1xuXG4gICAgZm9yKCB2YXIgaSA9IDA7IGkgPCBncm91bmRGbG9vci5zdG9yZXMubGVuZ3RoOyBpKyspXG4gICAge1xuICAgICAgICAgIGlmIChzdG9yZURhdGFbaV1bJ2lkJ10gPT0gaWQpXG4gICAgICAgICAge1xuICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgfVxuICAgIGZvciggdmFyIGkgPSAwOyBpIDwgZmlyc3RGbG9vci5zdG9yZXMubGVuZ3RoOyBpKyspXG4gICAge1xuICAgICAgICAgIGlmIChzdG9yZURhdGFbaV1bJ2lkJ10gPT0gaWQpXG4gICAgICAgICAge1xuICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5cbi8vRm9yIERlbW9cbnZhciBjb3VudGVyID0gMTtcbnZhciBjdXJyZW50SG91ciA9IDk7XG52YXIgY3VycmVudE1pbiA9IDA7XG4gIFxuICBmdW5jdGlvbiBpZGVudGlmeUVudGl0eShpZCkge1xuICAgIHZhciBsYXRMbmcgPSBsYXN0TW91c2VEb3duO1xuICAgIGQgPSBuZXcgRGF0ZSgpO1xuXG4gICAgdmFyIHZhbGlkID0gdmFsaWRJZChpZCk7XG5cbiAgICBpZih2YWxpZCAhPSBudWxsKVxuICAgIHtcbiAgICAgIC8vbWFwLnNldFZpZXcobGF0TG5nLCAxNyk7XG5cbiAgICAgIGQgPSBkaXNwbGF5VGltZSgpO1xuICAgICAgXG4gICAgICB2YXIgcG9wdXBPcHRpb25zID0geyBcbiAgICAgICAgaW5kb29yTWFwSWQ6IGN1cnJlbnRJbmRvb3JNYXBJZCwgXG4gICAgICAgIGluZG9vck1hcEZsb29ySW5kZXg6IGN1cnJlbnRGbG9vciwgXG4gICAgICAgIGF1dG9DbG9zZTogdHJ1ZSwgXG4gICAgICAgIGNsb3NlT25DbGljazogdHJ1ZSxcbiAgICAgICAgbWluV2lkdGg6IFwiNzAwXCIgICAgICAgICAgXG4gICAgICB9O1xuICAgICAgcG9wdXAgPSBMLnBvcHVwKHBvcHVwT3B0aW9ucylcbiAgICAgICAgLnNldExhdExuZyhsYXRMbmcpXG4gICAgICAgIC5hZGRUbyhtYXApXG4gICAgICAgIC5zZXRDb250ZW50KGNyZWF0ZU1vY2tIVE1MRWxlbWVudChpZCwgZCwgZmFrZURyYXdCYXNpYyhpZCkpKTtcbiAgICAgIGVudGl0eUlkc1RvUG9zaXRpb25baWRdID0geyBcImxhdExuZ1wiOiBsYXRMbmcsIFwiaW5kb29ySWRcIjogY3VycmVudEluZG9vck1hcElkLCBcImZsb29ySW5kZXhcIjogY3VycmVudEZsb29yIH0gO1xuXG4gICAgICAvL0ZvciBkZW1vXG4gICAgICBpZiAoY291bnRlciA9PSAwKVxuICAgICAge1xuICAgICAgICBjdXJyZW50SG91ciA9IGN1cnJlbnRIb3VyICsgMTtcbiAgICAgICAgY3VycmVudE1pbiA9IDA7XG4gICAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnRIb3VyKTtcbiAgICAgICAgY29uc29sZS5sb2coY3VycmVudE1pbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50TWluID0gY3VycmVudE1pbiArIDE1O1xuICAgICAgICBjb25zb2xlLmxvZyhjdXJyZW50SG91cik7XG4gICAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnRNaW4pO1xuICAgICAgfVxuICAgICAgaWYoY291bnRlciA9PSAzKVxuICAgICAge1xuICAgICAgICBjb3VudGVyID0gMDtcbiAgICAgIH1lbHNle1xuICAgICAgICBjb3VudGVyKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0VGltZW91dCh1cGRhdGVQb3B1cChpZCwgZCksIDUwMDApO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlUG9wdXAoaWQsIGQpXG4gIHtcbiAgICBkID0gbmV3IERhdGUoKTtcbiAgICBjb25zb2xlLmxvZyhkLnRvTG9jYWxlVGltZVN0cmluZygnaXQtSVQnKSk7XG4gICAgcG9wdXAuc2V0Q29udGVudChjcmVhdGVNb2NrSFRNTEVsZW1lbnQoaWQsIGQsIGRyYXdCYXNpYyhpZCkpKTtcbiAgfVxuXG4gIG1hcC5pbmRvb3JzLm9uKFwiaW5kb29ybWFwZW50ZXJcIiwgb25JbmRvb3JNYXBFbnRlcmVkKTtcbiAgbWFwLmluZG9vcnMub24oXCJpbmRvb3JtYXBmbG9vcmNoYW5nZVwiLCBvbkluZG9vck1hcEZsb29yQ2hhbmdlZClcbiAgbWFwLmluZG9vcnMub24oXCJpbmRvb3JlbnRpdHljbGlja1wiLCBvbkluZG9vckVudGl0eUNsaWNrZWQpO1xuICBtYXAub24oXCJtb3VzZWRvd25cIiwgb25Nb3VzZURvd24pO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZU1vY2tIVE1MRWxlbWVudChpZCwgZGF0ZSwgZ3JhcGhUZXh0KXtcbiAgICB2YXIgZ3JhcGhIVE1MID0gJzxkaXYgY2xhc3M9XCJjb250ZW50XCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8aDI+JysgZ2V0U3RvcmVOYW1lKGlkKSArICAnICcgKyBkYXRlICsgJzwvaDI+JyArXG4gICAgICAgICAgICAgICAgICAgIGdyYXBoVGV4dCArXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuICAgIHJldHVybiBncmFwaEhUTUw7XG59XG5cbiAgZnVuY3Rpb24gZGlzcGxheVRpbWUoKXtcbiAgICB2YXIgdG9SZXR1cm4gPSBcIjBcIjtcbiAgICB2YXIgdGVtcHY9IFwiXCI7XG4gICAgaWYgKGN1cnJlbnRIb3VyIDwgMTAgJiYgY3VycmVudE1pbiA9PSAwKVxuICAgIHtcbiAgICAgICAgdG9SZXR1cm4gPSB0b1JldHVybi5jb25jYXQoY3VycmVudEhvdXIpLmNvbmNhdChcIjpcIikuY29uY2F0KFwiMFwiKS5jb25jYXQoY3VycmVudE1pbik7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50SG91ciA8IDEwICYmIGN1cnJlbnRNaW4gIT0gMClcbiAgICB7XG4gICAgICAgIHRvUmV0dXJuID0gdG9SZXR1cm4uY29uY2F0KGN1cnJlbnRIb3VyKS5jb25jYXQoXCI6XCIpLmNvbmNhdChjdXJyZW50TWluKTtcbiAgICB9IGVsc2UgaWYgKCBjdXJyZW50SG91ciA+PSAxMCAmJiBjdXJyZW50TWluID09IDApXG4gICAge1xuICAgICAgdG9SZXR1cm4gPSB0ZW1wLmNvbmNhdChjdXJyZW50SG91cikuY29uY2F0KFwiOlwiKS5jb25jYXQoXCIwXCIpLmNvbmNhdChjdXJyZW50TWluKTtcbiAgICB9IGVsc2UgXG4gICAge1xuICAgICAgdG9SZXR1cm4gPSB0ZW1wLmNvbmNhdChjdXJyZW50SG91cikuY29uY2F0KFwiOlwiKS5jb25jYXQoY3VycmVudE1pbik7XG4gICAgfVxuICAgIHJldHVybiB0b1JldHVybjtcbiAgfVxuXG5cblxuXG5cbi8qICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJjb250ZW50XCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8aDI+JysgZ2V0U3RvcmVOYW1lKGlkKSArICcgZm9yIHRoZSAnICsgZC5nZXREYXRlKCkgKyAnIG9mIFNwZXRlbWJlciAyMDE4PC9oMj4nICtcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhUZXh0ICtcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7XG4qL1xuXG5cblxuIiwiLy8gdmFyIGQgPSBuZXcgRGF0ZSgpO1xuLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXRlXCIpLmlubmVySFRNTCA9IGQ7IiwiLy9PbmxvYWQgZnVuY3Rpb24gdG8gc2V0dXAgc2xpZGVyc1xud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpe1xuICAgIHZhciBzbGlkZXJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInJhbmdlUGlja2VyXCIpO1xuICAgIC8vIHZhciB0ZXh0Qm94ZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidGV4dEJveFwiKTtcbiAgICBbXS5mb3JFYWNoLmNhbGwoc2xpZGVycywgZnVuY3Rpb24gKHNsaWRlcikgeyAgICBcbiAgICAgICAgc2xpZGVyLm1pbiA9IDEwO1xuICAgICAgICBzbGlkZXIubWF4ID0gNTA7XG4gICAgICAgIHNsaWRlci5zdGVwID0gMTA7XG4gICAgICAgIHNsaWRlci52YWx1ZSA9IDMwO1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJTQURcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHByZXNldHNVcGRhdGUoMCkpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiR09PRFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcHJlc2V0c1VwZGF0ZSgyKSk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJOT1JNQUxcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHByZXNldHNVcGRhdGUoMSkpO1xufVxuXG5mdW5jdGlvbiBwcmVzZXRzVXBkYXRlKGxldmVsKXtcbiAgICB2YXIgb2NjdXBhbmN5ID0gWzEwLDMwLDUwXTtcbiAgICB2YXIgbm9pc2UgPSBbMTAsMzAsNTBdO1xuICAgIHZhciBodW1pZGl0eSA9IFsxMCwzMCw1MF07XG5cbiAgICBmb3IodmFyIGk9MDsgaSA8IDM7IGkrKyl7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib2NjdXBhbmN5LXNsaWRlclwiKS52YWx1ZSA9IG9jY3VwYW5jeVtsZXZlbF07XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm9pc2Utc2xpZGVyXCIpLnZhbHVlID0gbm9pc2VbbGV2ZWxdO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImh1bWlkaXR5LXNsaWRlclwiKS52YWx1ZSA9IGh1bWlkaXR5W2xldmVsXTtcbiAgICB9XG59Il19
