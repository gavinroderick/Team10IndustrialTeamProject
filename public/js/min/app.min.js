google.charts.load('current', {packages: ['corechart', 'line']});
google.charts.setOnLoadCallback(drawBasic);


    // var groundFloor;
    // var groundFloorReqURL = 'api/groundFloorStores.json';
    // var groundFloorReq = new XMLHttpRequest();
    // groundFloorReq.open('GET', groundFloorReqURL);
    // groundFloorReq.send();
    // groundFloorReq.onload = () => {
    //     var groundFloorStores = groundFloorReq.response;
    //     var obj = JSON.parse(groundFloorStores);
    //     groundFloor = obj;
    // }

    // var firstFloor;
    // var firstFloorReqURL = 'api/firstFloorStores.json';
    // var firstFloorReq = new XMLHttpRequest();
    // firstFloorReq.open('GET', firstFloorReqURL);
    // firstFloorReq.send();
    // firstFloorReq.onload = () => {
    //     var firstFloorStores = firstFloorReq.response;
    //     var obj = JSON.parse(firstFloorStores);
    //     firstFloor = obj;
    // }

    // var storeData;
    // var storeReqURL = 'api/data.json';
    // var storeReq = new XMLHttpRequest();
    // storeReq.open('GET', storeReqURL);
    // storeReq.send();
    // storeReq.onload = () => {
    //     var storeDatas = storeReq.response;
    //     var obj = JSON.parse(storeDatas);
    //     storeData = obj;
    // }

function drawBasic(id) {

    var store;

    var currentTime = new Date();
    var currentTimeArray = currentTime.toLocaleTimeString('it-IT').split(':');


    for( var i = 0; i < groundFloor.stores.length; i++)
    {
        if (storeData[i]['id'] == id)
        {
            store = i;
            break;
        }
    }
    for( var i = 0; i < firstFloor.stores.length; i++)
    {
        if (storeData[i]['id'] == id)
        {
            store = i;
            break;
        }
    }

    var data = new google.visualization.DataTable();

    data.addColumn('string', 'Time');
    data.addColumn('number', 'Occupancy');
    data.addColumn('number', 'Noise');
    data.addColumn('number', 'Humidity');
    data.addColumn('number', 'Occupancy Prediction');
    data.addColumn('number', 'Noise Prediction');
    data.addColumn('number', 'Humidity Prediction');


    for( var i = 1; i < 41; i++)
    {

      var timeslot = storeData[store]['history'][0]['times'][i-1]['timeslot'].toString();
      var timeslotArray = timeslot.split('');
      
      var hour = timeslotArray[11].concat(timeslotArray[12]);
      var min = timeslotArray[14].concat(timeslotArray[15]);
      var time = hour.concat(":");
      time = time.concat(min);

      if(hour < currentTimeArray[0])
      {
        data.addRows([
              [
                  
                  time, 
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100,
                  null,
                  null,
                  null
              ]
          ]
          );
      } else if (hour == currentTimeArray[0]){
        if(min <= currentTimeArray[1])
        {
          data.addRows([
              [
                  
                  time, 
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100,
                  null,
                  null,
                  null
              ]
          ]
          );
        } else {
          data.addRows([
              [
                  
                  time, 
                  null, 
                  null,
                  null,
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100
              ]
          ]
          );
        }
      }else {
        data.addRows([
              [
                  
                  time, 
                  null, 
                  null,
                  null,
                  storeData[store]['history'][0]['times'][i-1]['occupancy']*100, 
                  storeData[store]['history'][0]['times'][i-1]['noise']*100,
                  storeData[store]['history'][0]['times'][i-1]['humidity']*100
              ]
          ]
          );
      }
    }


      var options = {
        hAxis: { 
          showTextEvery : '4',
          gridlines :{count: '10'}
        },
        vAxis: {
          baseline: "0"
        },
        curveType: 'function',
        width: '700',
        legend: { position: 'bottom' }
      };

    var chart_div = document.getElementById('chart_div');
    var chart = new google.visualization.LineChart(chart_div);

    // Wait for the chart to finish drawing before calling the getImageURI() method.
    google.visualization.events.addListener(chart, 'ready', function () { });

    chart.draw(data, options);
    return('<img src="' + chart.getImageURI() + '">');
}
    var groundFloor;
    var groundFloorReqURL = 'api/groundFloorStores.json';
    var groundFloorReq = new XMLHttpRequest();
    groundFloorReq.open('GET', groundFloorReqURL);
    groundFloorReq.send();
    groundFloorReq.onload = () => {
        var groundFloorStores = groundFloorReq.response;
        var obj = JSON.parse(groundFloorStores);
        groundFloor = obj;
    }

    var firstFloor;
    var firstFloorReqURL = 'api/firstFloorStores.json';
    var firstFloorReq = new XMLHttpRequest();
    firstFloorReq.open('GET', firstFloorReqURL);
    firstFloorReq.send();
    firstFloorReq.onload = () => {
        var firstFloorStores = firstFloorReq.response;
        var obj = JSON.parse(firstFloorStores);
        firstFloor = obj;
    }

    var storeData;
    var storeReqURL = 'api/data.json';
    var storeReq = new XMLHttpRequest();
    storeReq.open('GET', storeReqURL);
    storeReq.send();
    storeReq.onload = () => {
        var storeDatas = storeReq.response;
        var obj = JSON.parse(storeDatas);
        storeData = obj;
    }

function setEntityHighlights() {
    updateMapFromSliders();
}
function setStoreHighlights(store, colour){
    store = store.toString();
    map.indoors.setEntityHighlights(store, colour);
}

function randomColor(){
    var red = Math.floor(Math.random() * 256);
    var green = 255 - red;
    return [red, green, 0, 200];
}

function clearEntityHighlights(){
    map.indoors.clearEntityHighlights();
}
var map = L.Wrld.map("map", "9d876646f7d83cc709edbe204c81d546", {
    center: [56.4598, -2.9728],
    zoom: 17,
    indoorsEnabled: true
});
  var indoorControl = new WrldIndoorControl("widget-container", map);
  var currentIndoorMapId;
  var currentFloor;
  var entityIdsToPosition = {};
  var d;
  var popup;
  
  var lastMouseDown;
  function onMouseDown(event) {
    lastMouseDown = event.latlng;
  }
  
  function onIndoorEntityClicked(event) {
    event.ids.forEach(identifyEntity);
  }

  function exportIdMap() {
    console.log(JSON.stringify(entityIdsToPosition));
  }
  
  function onIndoorMapEntered(event) {
    map.indoors.setFloor(0);
    map.setView([56.4598, -2.9728], 17);
    currentIndoorMapId = event.indoorMap.getIndoorMapId();
    currentFloor = map.indoors.getFloor().getFloorIndex();
  }
  
  function onIndoorMapFloorChanged() {
    currentFloor = map.indoors.getFloor().getFloorIndex();
  }

  function getStoreName(id){
    if(currentFloor == 0)
    {
      for(var i = 0; i < groundFloor.stores.length; i++)
      {
        if(groundFloor.stores[i].id == id)
        {
          //console.log(groundFloor.stores[i].store);
          return groundFloor.stores[i].store;
        }
      }
    }
  }

  function validId(id) {

    for( var i = 0; i < groundFloor.stores.length; i++)
    {
          if (storeData[i]['id'] == id)
          {
              return i;
          }
    }
    for( var i = 0; i < firstFloor.stores.length; i++)
    {
          if (storeData[i]['id'] == id)
          {
              return i;
          }
    }
    return null;
}
  
  function identifyEntity(id) {
    var latLng = lastMouseDown;
    d = new Date();

    var valid = validId(id);

    if(valid != null)
    {
      map.setView(latLng, 17);
      
      var popupOptions = { 
        indoorMapId: currentIndoorMapId, 
        indoorMapFloorIndex: currentFloor, 
        autoClose: true, 
        closeOnClick: true,
        minWidth: "700"          
      };
      popup = L.popup(popupOptions)
        .setLatLng(latLng)
        .addTo(map)
        .setContent(createMockHTMLElement(id, d, drawBasic(id)));
      entityIdsToPosition[id] = { "latLng": latLng, "indoorId": currentIndoorMapId, "floorIndex": currentFloor } ;
    }

    setTimeout(updatePopup(id, d), 5000);
  }

  function updatePopup(id, d)
  {
    d = new Date();
    console.log(d.toLocaleTimeString('it-IT'));
    popup.setContent(createMockHTMLElement(id, d, drawBasic(id)));
  }

  map.indoors.on("indoormapenter", onIndoorMapEntered);
  map.indoors.on("indoormapfloorchange", onIndoorMapFloorChanged)
  map.indoors.on("indoorentityclick", onIndoorEntityClicked);
  map.on("mousedown", onMouseDown);

  function createMockHTMLElement(id, date, graphText){
    var graphHTML = '<div class="content">' +
                    '<h2>'+ getStoreName(id) +  ' ' + d.toLocaleTimeString('it-IT') +
                    graphText +
                    '</div>';
    return graphHTML;
}





/*                  '<div class="content">' +
                    '<h2>'+ getStoreName(id) + ' for the ' + d.getDate() + ' of Spetember 2018</h2>' +
                    graphText +
                    '</div>';
*/




//Onload function to setup sliders
window.onload = function (){
    var sliders = document.getElementsByClassName("rangePicker");
    // var textBoxes = document.getElementsByClassName("textBox");
    [].forEach.call(sliders, function (slider) {    
        slider.min = 1;
        slider.max = 5;
        slider.step = 1;
        slider.value = 3;
    });
}

function presetsUpdate(level){
    var occupancy = [1,3,5];
    var noise = [1,3,5];
    var light = [1,3,5];

    for(var i=0; i < 3; i++){
        document.getElementById("occupancy-slider").value = occupancy[level];
        document.getElementById("noise-slider").value = noise[level];
        document.getElementById("light-slider").value = light[level];
    }
}

// Called when a slider is updated. 
function updateMapFromSliders(){ 
    var stores = storeData;
    var current = getCurrentSliderLevel();
    var sliderOccupancy = current[0]/5;
    var sliderNoise = current[1]/5;
    var sliderHumidity = current[2]/5;
    console.log("Slider Values: " + sliderOccupancy + " " + sliderNoise + " " + sliderHumidity);

    for(var i = 0; i < stores.length; i++){
        var storeID = stores[i].id;
        var currentOccupancy = stores[i].history[0].times[0].occupancy;
        var currentNoise = stores[i].history[0].times[0].noise;
        var currentHumidity = stores[i].history[0].times[0].humidity;

        console.log("Values: " + currentOccupancy + " " + currentNoise + " " + currentHumidity);

        
        if(currentOccupancy <= sliderOccupancy && currentNoise <= sliderNoise && currentHumidity <= sliderHumidity){
            setStoreHighlights(storeID, [108,249,32, 200]); //green
        }
        else if(currentOccupancy > sliderOccupancy && currentNoise > sliderNoise && currentHumidity > sliderHumidity){
        	setStoreHighlights(storeID, [249,71,32, 200]); //red 
        }
        else{
        	setStoreHighlights(storeID, [249,239,32, 200]); //yellow
        }
    }

}

// Gets current levels sliders are at, parses them into numbers.
// Returns as an array.
function getCurrentSliderLevel(){
    var sliderArray =[];
    var sliders = document.getElementsByClassName("rangePicker");
    [].forEach.call(sliders, function (slider) {
        sliderArray.push(parseInt(slider.value, 10));
    });
    console.log("Slider Values: " + sliderArray);
    return sliderArray;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
